[
    {
        "id": "d4a9b32e324082e1",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "216dad58.0b1502",
        "type": "ibmiot in",
        "z": "d4a9b32e324082e1",
        "authentication": "apiKey",
        "apiKey": "5a3715f5bab94757",
        "inputType": "evt",
        "logicalInterface": "",
        "ruleId": "",
        "deviceId": "",
        "applicationId": "",
        "deviceType": "",
        "eventType": "",
        "commandType": "",
        "format": "",
        "name": "IBM IoT App In",
        "service": "registered",
        "allDevices": true,
        "allApplications": "",
        "allDeviceTypes": true,
        "allLogicalInterfaces": false,
        "allEvents": true,
        "allCommands": "",
        "allFormats": "",
        "qos": "0",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "173a577e881643a6"
            ]
        ]
    },
    {
        "id": "f9e13431.747ac8",
        "type": "function",
        "z": "d4a9b32e324082e1",
        "name": "sensor_data",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "b45762f841ae061a",
                "246d4f49272a1ddc"
            ]
        ]
    },
    {
        "id": "cd2239f341d412e8",
        "type": "cloudant out",
        "z": "d4a9b32e324082e1",
        "name": "watcop-db",
        "cloudant": "",
        "database": "watcop-db",
        "service": "cool-app-cloudant-1644397982194-95552",
        "payonly": false,
        "operation": "insert",
        "x": 1030,
        "y": 360,
        "wires": []
    },
    {
        "id": "d7cf717c7614701a",
        "type": "http response",
        "z": "d4a9b32e324082e1",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2330,
        "y": 300,
        "wires": []
    },
    {
        "id": "0de86458b66f5fd9",
        "type": "template",
        "z": "d4a9b32e324082e1",
        "name": "format page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <meta http-equiv=\"refresh\" content=\"10\">\n         <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n    </head>\n<body>\n        Timestamp: {{timestamp}}<p>\n\n    Sound: {{sound}}\n    <p>\n        \n    Humidity: {{humi}}\n    <p>\n        \n    Light: {{illu}}\n    <p>\n        \n    Temperature: {{temp}}\n    <br>\n    Heater: <button id=\"heater_button\" onclick=\"heater()\" {{ heater_button_disabled}}>{{ heater_status}}</button>\n    <p>\n        \n    Water: {{water}}\n    <br>\n    <button id=\"pump_button\" onclick=\"pour()\" {{ pump_button_disabled}}>{{ pump_status}}</button>\n    <p>\n        \n    Food Times:\n    <ul id=\"resourceList\"></ul>\n    {{#payload.payload}}\n        <li id={{time}}>{{time}}  <button id={{_id}} name={{_rev}} onclick=\"deleteTime(this)\">Delete</button></li>\n    {{/payload.payload}}\n\n    <br>\n    New time: <input id=\"input_field\">  <button onclick=\"addFoodTime()\">Add</button>\n</form>\n\n        <script>\n        function deleteTime(elem) {\n    element = document.getElementById(elem);\n    alert(element)\n    element.remove()\n}\n\nfunction heater() {\n    sendData({\"heater\":\"{{heater_status}}\"})\n    \n    //update button\n    var button = document.getElementById(\"heater_button\");\n    button.innerHTML = \"Updating...\";\n    button.disabled = true;\n}\n\nfunction pour() {\n    sendData({\"water_pump\":\"{{pump_status}}\"})\n\n    //update button\n    var button = document.getElementById(\"pump_button\");\n    button.innerHTML = \"Pouring...\";\n    button.disabled = true;\n    \n}\n\nfunction addFoodTime() {\n    var input = document.getElementById(\"input_field\");\n    var time = input.value;\n    input.value = \"\";\n    const userKeyRegExp = /^([01]\\d|2[0123]):[0-5]\\d$/;\n    if (!userKeyRegExp.test(time)) {\n        alert(\"Invalid time. Please insert a time in the format \\\"HH:mm\\\" (24h)\");\n    }\n    else {\n        if (!document.getElementById(time)) {\n            sendData({\"time\": time});\n            alert(\"New time added, please refresh the page\");\n        }\n        else {\n            alert(\"Error: time already exists\");\n        }\n    }\n}\n\nfunction deleteTime(obj) {\n    var time = obj.parentElement.id;\n    var id = obj.id;\n    var rev = obj.name;\n    obj.parentElement.remove();\n    sendData({\"delete\": time, \"_id\": id, \"_rev\": rev});\n}\n\nfunction sendData(object) {\n    let url = \"https://willmishapp.eu-gb.mybluemix.net/history\";\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", url);\n    \n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    \n    xhr.onreadystatechange = function () {\n       if (xhr.readyState === 4) {\n          console.log(xhr.responseText);\n       }};\n    \n    let data = JSON.stringify(object);\n    \n    xhr.send(data);\n}\n\n</script>\n\n</body>\n</html>\n",
        "x": 2170,
        "y": 300,
        "wires": [
            [
                "d7cf717c7614701a"
            ]
        ]
    },
    {
        "id": "2ede16ab688c964b",
        "type": "function",
        "z": "d4a9b32e324082e1",
        "name": "temp stats",
        "func": "var avg = 0;\nvar max = 0;\nvar min = 9999;\nvar count = 0;\nvar sum = 0;\nvar temp =0;\n\nvar array = Object.values(msg.payload)\narray = array.sort((a, b) => (new Date(a.payload.sensor_data.timestamp) < new Date(b.payload.sensor_data.timestamp)) ? 1 : -1);\nvar most_recent = array[0].payload.sensor_data\nmsg.payload = {};\nmsg.timestamp = most_recent.timestamp;\nmsg.sound = most_recent.sound;\nmsg.humi = most_recent.humi;\nmsg.illu = most_recent.illu;\nmsg.temp = most_recent.temp;\nmsg.water = most_recent.water;\n\nmsg.heater_status = flow.get(\"heater_status\");\nif (msg.heater_status == undefined) {\n    msg.heater_status = \"Error\";\n    msg.heater_button_disabled = \"disabled\";\n}\nelse if (flow.get(\"heater_status\") == \"Updating...\") {\n    msg.heater_button_disabled = \"disabled\";\n}\n\nmsg.pump_status = flow.get(\"pump_status\");\nif (msg.pump_status == undefined) {\n    msg.pump_status = \"Error\";\n    msg.pump_button_disabled = \"disabled\";\n}\nelse if (flow.get(\"pump_status\") == \"Pouring...\") {\n    msg.pump_button_disabled = \"disabled\";\n}\n\n/*\nfor (var i in msg.payload){\n    temp = parseFloat(msg.payload[i].payload);\n    if (temp == NaN)\n        continue;\n    count += 1;\n    sum += temp;\n    if (temp > max){\n        max = temp;\n    }\n    if (temp < min){\n        min = temp;\n    }\n}\n\n\n\navg = sum / count;\n\nmsg.count = count;\nmsg.avg = avg.toFixed(2); \nmsg.max = max;\nmsg.min = min;*/\n//msg.temp = typeof(Object.values(msg.payload))\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 380,
        "wires": [
            [
                "6276e757bc9de8f6"
            ]
        ]
    },
    {
        "id": "e62fce45716c28e9",
        "type": "cloudant in",
        "z": "d4a9b32e324082e1",
        "name": "",
        "cloudant": "",
        "database": "watcop-db",
        "service": "cool-app-cloudant-1644397982194-95552",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 1490,
        "y": 380,
        "wires": [
            [
                "2ede16ab688c964b"
            ]
        ]
    },
    {
        "id": "56fca59663c31275",
        "type": "http in",
        "z": "d4a9b32e324082e1",
        "name": "",
        "url": "/history",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1290,
        "y": 340,
        "wires": [
            [
                "e62fce45716c28e9",
                "c0c970e23dbe6c51"
            ]
        ]
    },
    {
        "id": "173a577e881643a6",
        "type": "switch",
        "z": "d4a9b32e324082e1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "heater_status",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "pump_status",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "sensor_data",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "b9c0d91b56873e5a"
            ],
            [
                "0d06e55945ac415f"
            ],
            [
                "f9e13431.747ac8"
            ]
        ],
        "outputLabels": [
            "heater_status",
            "pump_status",
            "sensor_data"
        ]
    },
    {
        "id": "22d01919af5ea0a6",
        "type": "http in",
        "z": "d4a9b32e324082e1",
        "name": "",
        "url": "/history",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1290,
        "y": 540,
        "wires": [
            [
                "081c07df56559583",
                "a9a71af66dc1a245",
                "46b174e2a31a76e4"
            ]
        ]
    },
    {
        "id": "6057b9535c7bce0f",
        "type": "comment",
        "z": "d4a9b32e324082e1",
        "name": "Returns all values in sensor_data object: temp, hum, ilu, and water_level",
        "info": "",
        "x": 680,
        "y": 400,
        "wires": []
    },
    {
        "id": "b45762f841ae061a",
        "type": "change",
        "z": "d4a9b32e324082e1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.sensor_data.timestamp",
                "pt": "msg",
                "to": "$now()",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 360,
        "wires": [
            [
                "cd2239f341d412e8"
            ]
        ]
    },
    {
        "id": "46b174e2a31a76e4",
        "type": "ibmiot out",
        "z": "d4a9b32e324082e1",
        "authentication": "apiKey",
        "apiKey": "5a3715f5bab94757",
        "outputType": "cmd",
        "deviceId": "9C9C1FC187E0",
        "deviceType": "mkr1010",
        "eventCommandType": "display",
        "format": "json",
        "data": "msg",
        "qos": "1",
        "name": "IBM IoT",
        "service": "registered",
        "x": 1500,
        "y": 540,
        "wires": []
    },
    {
        "id": "b9c0d91b56873e5a",
        "type": "function",
        "z": "d4a9b32e324082e1",
        "name": "heater_status",
        "func": "if (msg.payload.heater_status) {\n    flow.set(\"heater_status\", \"On\");\n}\nelse {\n    flow.set(\"heater_status\", \"Off\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "246d4f49272a1ddc"
            ]
        ]
    },
    {
        "id": "0d06e55945ac415f",
        "type": "function",
        "z": "d4a9b32e324082e1",
        "name": "pump_status",
        "func": "if (msg.payload.pump_status) {\n    flow.set(\"pump_status\", \"Pouring...\");\n}\nelse {\n    flow.set(\"pump_status\", \"Pour\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 320,
        "wires": [
            [
                "246d4f49272a1ddc"
            ]
        ]
    },
    {
        "id": "081c07df56559583",
        "type": "switch",
        "z": "d4a9b32e324082e1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "heater",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "water_pump",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "time",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1490,
        "y": 620,
        "wires": [
            [
                "f9573119ffe39fee"
            ],
            [
                "0431d8c59fcd1d71"
            ],
            [
                "de22e77464cd47cb"
            ],
            [
                "14fd8ee561fac2d7"
            ]
        ]
    },
    {
        "id": "c0c970e23dbe6c51",
        "type": "cloudant in",
        "z": "d4a9b32e324082e1",
        "name": "food times",
        "cloudant": "",
        "database": "watcop-food-times-db",
        "service": "cool-app-cloudant-1644397982194-95552",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 1490,
        "y": 300,
        "wires": [
            [
                "71d20d5a8aab7590"
            ]
        ]
    },
    {
        "id": "de22e77464cd47cb",
        "type": "cloudant out",
        "z": "d4a9b32e324082e1",
        "name": "insert food time",
        "cloudant": "",
        "database": "watcop-food-times-db",
        "service": "cool-app-cloudant-1644397982194-95552",
        "payonly": true,
        "operation": "insert",
        "x": 1700,
        "y": 640,
        "wires": []
    },
    {
        "id": "14fd8ee561fac2d7",
        "type": "cloudant out",
        "z": "d4a9b32e324082e1",
        "name": "delete food time",
        "cloudant": "",
        "database": "watcop-food-times-db",
        "service": "cool-app-cloudant-1644397982194-95552",
        "payonly": false,
        "operation": "delete",
        "x": 1700,
        "y": 680,
        "wires": []
    },
    {
        "id": "a9a71af66dc1a245",
        "type": "debug",
        "z": "d4a9b32e324082e1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 480,
        "wires": []
    },
    {
        "id": "1b323c2b20dc1c8a",
        "type": "debug",
        "z": "d4a9b32e324082e1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 240,
        "wires": []
    },
    {
        "id": "71d20d5a8aab7590",
        "type": "function",
        "z": "d4a9b32e324082e1",
        "name": "Extract food times and add flow vars",
        "func": "var array = Object.values(msg.payload);\nmsg.payload = array;\nmsg.complete = \"monke cool\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 300,
        "wires": [
            [
                "6276e757bc9de8f6"
            ]
        ]
    },
    {
        "id": "6276e757bc9de8f6",
        "type": "join",
        "z": "d4a9b32e324082e1",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 2010,
        "y": 300,
        "wires": [
            [
                "1b323c2b20dc1c8a",
                "0de86458b66f5fd9"
            ]
        ]
    },
    {
        "id": "f9573119ffe39fee",
        "type": "function",
        "z": "d4a9b32e324082e1",
        "name": "Update heater status",
        "func": "flow.set(\"heater_status\", \"Updating...\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "0431d8c59fcd1d71",
        "type": "function",
        "z": "d4a9b32e324082e1",
        "name": "Update water pump status",
        "func": "flow.set(\"pump_status\", \"Pouring...\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "4bef76d63dce52d9",
        "type": "function",
        "z": "d4a9b32e324082e1",
        "name": "Check time",
        "func": "var now = new Date();\nvar array = msg.payload;\nfor (var i = 0; i < array.length; i++) {\n    if (now.getHours() == array[i].time.substring(0,2) &&\n        now.getMinutes() == array[i].time.substring(3)) {\n            \n        return {payload:{dispense_food:\"dispense_food\"}};\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 580,
        "wires": [
            [
                "146ffc5e96c33731",
                "e0029fc45d795169"
            ]
        ]
    },
    {
        "id": "965a1206df52c1d5",
        "type": "cloudant in",
        "z": "d4a9b32e324082e1",
        "name": "food times",
        "cloudant": "",
        "database": "watcop-food-times-db",
        "service": "cool-app-cloudant-1644397982194-95552",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 330,
        "y": 580,
        "wires": [
            [
                "4bef76d63dce52d9"
            ]
        ]
    },
    {
        "id": "146ffc5e96c33731",
        "type": "ibmiot out",
        "z": "d4a9b32e324082e1",
        "authentication": "apiKey",
        "apiKey": "5a3715f5bab94757",
        "outputType": "cmd",
        "deviceId": "9C9C1FC187E0",
        "deviceType": "mkr1010",
        "eventCommandType": "display",
        "format": "json",
        "data": "msg",
        "qos": "1",
        "name": "IBM IoT",
        "service": "registered",
        "x": 720,
        "y": 580,
        "wires": []
    },
    {
        "id": "9106f43c14eb2c33",
        "type": "comment",
        "z": "d4a9b32e324082e1",
        "name": "Check time every minute, if it  matches an entry in the DB, send a message to dispense food",
        "info": "",
        "x": 360,
        "y": 540,
        "wires": []
    },
    {
        "id": "6ae15cda99175bdc",
        "type": "inject",
        "z": "d4a9b32e324082e1",
        "name": "Every minute",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "965a1206df52c1d5"
            ]
        ]
    },
    {
        "id": "e0029fc45d795169",
        "type": "debug",
        "z": "d4a9b32e324082e1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 640,
        "wires": []
    },
    {
        "id": "246d4f49272a1ddc",
        "type": "debug",
        "z": "d4a9b32e324082e1",
        "name": "device data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 280,
        "wires": []
    },
    {
        "id": "7b0efb3fc26b1996",
        "type": "comment",
        "z": "d4a9b32e324082e1",
        "name": "Update heater_status and pump_status flow variables",
        "info": "",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "5a3715f5bab94757",
        "type": "ibmiot",
        "name": "Szymeks board API",
        "keepalive": "60",
        "serverName": "x8puew.messaging.internetofthings.ibmcloud.com",
        "cleansession": true,
        "appId": "",
        "shared": false
    }
]
